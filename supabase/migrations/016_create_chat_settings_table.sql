/**
 * Migration: Create chat_settings table for integration configuration
 * Purpose: Store Mind2Flow/WhatsApp integration settings per workspace
 * Phase: 5.2 - Chat Integration
 */

-- Create chat_settings table
CREATE TABLE IF NOT EXISTS chat_settings (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
  
  -- Provider configuration
  provider_name TEXT DEFAULT 'mind2flow' NOT NULL,
  webhook_url TEXT, -- URL for Mind2Flow to send messages to (generated by our system)
  api_endpoint TEXT, -- Mind2Flow API endpoint to send messages
  api_key TEXT, -- Encrypted API key
  api_secret TEXT, -- Encrypted API secret
  
  -- Feature flags
  is_active BOOLEAN DEFAULT false NOT NULL,
  auto_create_contacts BOOLEAN DEFAULT true NOT NULL,
  enable_notifications BOOLEAN DEFAULT true NOT NULL,
  
  -- Configuration (extensible JSONB for provider-specific settings)
  config JSONB DEFAULT '{}'::jsonb,
  
  -- Timestamps
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  
  -- Ensure one settings record per workspace
  CONSTRAINT chat_settings_workspace_unique UNIQUE (workspace_id)
);

-- Create index
CREATE INDEX idx_chat_settings_workspace_id ON chat_settings(workspace_id);
CREATE INDEX idx_chat_settings_is_active ON chat_settings(is_active) WHERE is_active = true;

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_chat_settings_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for updated_at
CREATE TRIGGER chat_settings_updated_at_trigger
  BEFORE UPDATE ON chat_settings
  FOR EACH ROW
  EXECUTE FUNCTION update_chat_settings_updated_at();

-- Enable Row Level Security
ALTER TABLE chat_settings ENABLE ROW LEVEL SECURITY;

-- RLS Policy: Users can only access settings for their workspace
CREATE POLICY chat_settings_workspace_isolation ON chat_settings
  FOR ALL
  USING (
    workspace_id IN (
      SELECT workspace_id 
      FROM workspace_members 
      WHERE user_id = auth.uid()
    )
  )
  WITH CHECK (
    workspace_id IN (
      SELECT workspace_id 
      FROM workspace_members 
      WHERE user_id = auth.uid()
    )
  );

-- RLS Policy: Service role can read settings (for webhook handler)
CREATE POLICY chat_settings_service_role_select ON chat_settings
  FOR SELECT
  TO service_role
  USING (true);

-- Grant permissions
GRANT SELECT, INSERT, UPDATE ON chat_settings TO authenticated;
GRANT SELECT ON chat_settings TO service_role;

-- Add comments for documentation
COMMENT ON TABLE chat_settings IS 'Configuration for Mind2Flow/WhatsApp chat integration per workspace';
COMMENT ON COLUMN chat_settings.auto_create_contacts IS 'When enabled, automatically create contacts from incoming messages if they do not exist';
COMMENT ON COLUMN chat_settings.webhook_url IS 'Generated webhook URL that Mind2Flow should call to send incoming messages';
COMMENT ON COLUMN chat_settings.config IS 'Flexible JSONB field for provider-specific configuration';

